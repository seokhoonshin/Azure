{
	"name": "dates_data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dates_azuresql",
						"type": "DatasetReference"
					},
					"name": "azuredates"
				},
				{
					"dataset": {
						"referenceName": "vm_dates",
						"type": "DatasetReference"
					},
					"name": "vmdates"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "combined_dates_data",
						"type": "DatasetReference"
					},
					"name": "combineddates"
				}
			],
			"transformations": [
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          DateKey as integer,",
				"          FullDate as date,",
				"          isWeekDay as boolean,",
				"          DayOfWeek as integer,",
				"          DayOfMonth as integer,",
				"          DayOfQuarter as integer,",
				"          DayOfYear as integer,",
				"          DayName as string,",
				"          WeekOfYear as integer,",
				"          WeekName as string,",
				"          MonthOfYear as integer,",
				"          MonthName as string,",
				"          CalendarQuarter as integer,",
				"          CalendarQuarterName as string,",
				"          CalendarYear as integer,",
				"          FiscalMonth as integer,",
				"          FiscalMonthName as string,",
				"          FiscalQuarter as integer,",
				"          FiscalQuarterName as string,",
				"          FiscalYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     partitionBy('hash', 1)) ~> azuredates",
				"source(output(",
				"          DateKey as integer,",
				"          FullDate as date,",
				"          isWeekDay as boolean,",
				"          DayOfWeek as integer,",
				"          DayOfMonth as integer,",
				"          DayOfQuarter as integer,",
				"          DayOfYear as integer,",
				"          DayName as string,",
				"          WeekOfYear as integer,",
				"          WeekName as string,",
				"          MonthOfYear as integer,",
				"          MonthName as string,",
				"          CalendarQuarter as integer,",
				"          CalendarQuarterName as string,",
				"          CalendarYear as integer,",
				"          FiscalMonth as integer,",
				"          FiscalMonthName as string,",
				"          FiscalQuarter as integer,",
				"          FiscalQuarterName as string,",
				"          FiscalYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     partitionBy('hash', 1)) ~> vmdates",
				"azuredates, vmdates join(azuredates@DateKey == vmdates@DateKey",
				"     && azuredates@FullDate == vmdates@FullDate",
				"     && azuredates@isWeekDay == vmdates@isWeekDay",
				"     && azuredates@DayOfWeek == vmdates@DayOfWeek",
				"     && azuredates@DayOfMonth == vmdates@DayOfMonth",
				"     && azuredates@DayOfQuarter == vmdates@DayOfQuarter",
				"     && azuredates@DayOfYear == vmdates@DayOfYear",
				"     && azuredates@DayName == vmdates@DayName",
				"     && azuredates@WeekOfYear == vmdates@WeekOfYear",
				"     && azuredates@WeekName == vmdates@WeekName",
				"     && azuredates@MonthOfYear == vmdates@MonthOfYear",
				"     && azuredates@MonthName == vmdates@MonthName",
				"     && azuredates@CalendarQuarter == vmdates@CalendarQuarter",
				"     && azuredates@CalendarQuarterName == vmdates@CalendarQuarterName",
				"     && azuredates@CalendarYear == vmdates@CalendarYear",
				"     && azuredates@FiscalMonth == vmdates@FiscalMonth",
				"     && azuredates@FiscalMonthName == vmdates@FiscalMonthName",
				"     && azuredates@FiscalQuarter == vmdates@FiscalQuarter",
				"     && azuredates@FiscalQuarterName == vmdates@FiscalQuarterName",
				"     && azuredates@FiscalYear == vmdates@FiscalYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['date.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> combineddates"
			]
		}
	}
}