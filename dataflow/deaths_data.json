{
	"name": "deaths_data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "covidmetrics_azuresql",
						"type": "DatasetReference"
					},
					"name": "azuremetrics"
				},
				{
					"dataset": {
						"referenceName": "vm_metrics",
						"type": "DatasetReference"
					},
					"name": "vmmetrics"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "deaths_data",
						"type": "DatasetReference"
					},
					"name": "deathsdata"
				}
			],
			"transformations": [
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     partitionBy('hash', 1)) ~> azuremetrics",
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     partitionBy('hash', 1)) ~> vmmetrics",
				"azuremetrics, vmmetrics join(azuremetrics@ID == vmmetrics@ID",
				"     && azuremetrics@Updated == vmmetrics@Updated",
				"     && azuremetrics@Deaths == vmmetrics@Deaths",
				"     && azuremetrics@Deaths_Change == vmmetrics@Deaths_Change",
				"     && azuremetrics@Latitude == vmmetrics@Latitude",
				"     && azuremetrics@Longitude == vmmetrics@Longitude",
				"     && azuremetrics@ISO2 == vmmetrics@ISO2",
				"     && azuremetrics@ISO3 == vmmetrics@ISO3",
				"     && azuremetrics@Country_Region == vmmetrics@Country_Region",
				"     && azuremetrics@load_time == vmmetrics@load_time,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> join1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['deaths.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> deathsdata"
			]
		}
	}
}